# ================================
# StoryWeave Backend Configuration
# ================================
# Copy this file to .env and fill in your actual values
# NEVER commit .env to git!

# ================================
# Flask Configuration
# ================================
FLASK_APP=app.py
FLASK_ENV=development
# Generate with: python -c "import secrets; print(secrets.token_hex(32))"
FLASK_SECRET_KEY=your_secret_key_here_generate_random_string

# Server configuration
PORT=5000
HOST=0.0.0.0

# ================================
# AWS Configuration (Bedrock + DynamoDB)
# ================================
# Get from AWS Console: IAM -> Users -> Security Credentials
# IMPORTANT: This ONE set of credentials is used for BOTH Bedrock AND DynamoDB!

AWS_ACCESS_KEY_ID=your_aws_access_key_here
AWS_SECRET_ACCESS_KEY=your_aws_secret_key_here
AWS_REGION=us-west-2

# ================================
# AWS Bedrock (Story Generation)
# ================================
# Model tier strategy (switch based on development phase)
# Options: cheap (testing), medium (development), demo (good quality), quality (final demo)
AWS_BEDROCK_MODEL_TIER=cheap

# Individual model IDs (don't change unless you know what you're doing)
AWS_BEDROCK_MODEL_CHEAP=mistral.mistral-7b-instruct-v0:2
AWS_BEDROCK_MODEL_MEDIUM=meta.llama3-1-8b-instruct-v1:0
AWS_BEDROCK_MODEL_DEMO=anthropic.claude-3-haiku-20240307-v1:0
AWS_BEDROCK_MODEL_QUALITY=anthropic.claude-3-5-sonnet-20241022-v2:0

# Generation settings
AWS_BEDROCK_MAX_TOKENS=1500
AWS_BEDROCK_TEMPERATURE=0.7

# ================================
# DynamoDB Configuration
# ================================
# Uses same AWS credentials above - no additional setup needed!
# Tables will be created automatically when you run: python -c "from database import create_tables; create_tables()"

DYNAMODB_TABLE_PROFILES=StoryWeave-Profiles
DYNAMODB_TABLE_STORIES=StoryWeave-Stories

# DynamoDB billing mode (already set in code, but documented here)
# PAY_PER_REQUEST = On-demand pricing (no capacity planning needed)
DYNAMODB_BILLING_MODE=PAY_PER_REQUEST

# ================================
# CORS Configuration
# ================================
# Frontend URL (for development)
FRONTEND_URL=http://localhost:3000

# Production frontend URL (update before deploying)
PRODUCTION_FRONTEND_URL=https://your-app.vercel.app

# ================================
# Story Generation Settings
# ================================
# Cache settings for backup stories
ENABLE_STORY_CACHE=true
CACHE_SIZE=10

# Rate limiting (requests per minute)
RATE_LIMIT=30

# ================================
# Logging
# ================================
LOG_LEVEL=INFO
LOG_FILE=app.log

# ================================
# Development Settings
# ================================
DEBUG=true

# ================================
# Setup Instructions:
# ================================
# 1. Copy this file: cp .env.example .env
# 2. Get AWS credentials from AWS IAM Console
#    - Create IAM user with policies:
#      * AmazonBedrockFullAccess
#      * AmazonDynamoDBFullAccess
# 3. Generate Flask secret key with: 
#    python -c "import secrets; print(secrets.token_hex(32))"
# 4. Update all placeholder values above
# 5. Create DynamoDB tables:
#    python -c "from database import create_tables; create_tables()"
# 6. NEVER commit .env to git!
#
# Quick test:
# python -c "from dotenv import load_dotenv; load_dotenv(); import os; print('✓ Loaded' if os.getenv('AWS_ACCESS_KEY_ID') else '✗ Failed')"

# ================================
# Important Notes:
# ================================
# - ONE set of AWS credentials for BOTH Bedrock and DynamoDB
# - No MongoDB connection string needed!
# - DynamoDB tables are created via Python script, not manually
# - Free tier covers everything you need for hackathon + beyond